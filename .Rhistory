) +
theme_classic(base_size = 12) +
transition_states(frame,
transition_length = 1,
state_length = 1) +
ease_aes('cubic-in-out')
# Render the animation
anim <- animate(p,
width = 800,
height = 600,
fps = 20,
duration = 8) #,
#renderer = gifski_renderer("marginal_to_scatter.gif"))
# Display the animation
#anim
# Display the animation
anim
#| label: marginal-to-scatter-animation
#| fig-width: 8
#| fig-height: 6
#| cache: true
# Your animation code here...
create_animation_data <- function(data, n_frames = 50) {
frames <- data.frame()
for(i in 0:n_frames) {
progress <- i / n_frames
eased_progress <- 3 * progress^2 - 2 * progress^3
frame_data <- data %>%
mutate(
x_pos = (1 - eased_progress) * 0 + eased_progress * DAP_IQ,
y_pos = (1 - eased_progress) * WPPSI + eased_progress * WPPSI,
frame = i,
state = ifelse(i == 0, "Marginal Y",
ifelse(i == n_frames, "Scatter", "Transition"))
)
frame_data_x <- data %>%
mutate(
x_pos = (1 - eased_progress) * DAP_IQ + eased_progress * DAP_IQ,
y_pos = (1 - eased_progress) * 0 + eased_progress * WPPSI,
frame = i,
state = ifelse(i == 0, "Marginal X",
ifelse(i == n_frames, "Scatter", "Transition"))
)
frames <- rbind(frames, frame_data, frame_data_x)
}
return(frames)
}
# Create animation
anim_data <- create_animation_data(DATA)
p <- ggplot(anim_data, aes(x = x_pos, y = y_pos)) +
geom_point(col = "blue", size = 1.5, alpha = 0.7) +
xlim(c(0, 150)) +
ylim(c(0, 140)) +
labs(
title = "Transition from Marginal Distributions to Scatter Plot",
x = "DAP_IQ",
y = "WPPSI"
) +
theme_classic(base_size = 12) +
transition_states(frame,
transition_length = 1,
state_length = 1) +
ease_aes('cubic-in-out')
# This will automatically display in Quarto HTML
animate(p,
width = 800,
height = 600,
fps = 20,
duration = 8,
renderer = gifski_renderer())
#| cache: true
# Assuming your data is called 'DATA'
# Create animation data with transition states
create_animation_data <- function(data, n_frames = 50) {
# Create frames for the transition
frames <- data.frame()
for(i in 0:n_frames) {
# Calculate transition progress (0 = marginal, 1 = scatter)
progress <- i / n_frames
# Smooth easing function (ease-in-out)
eased_progress <- 3 * progress^2 - 2 * progress^3
frame_data <- data %>%
mutate(
# Interpolate between marginal positions and actual positions
x_pos = (1 - eased_progress) * 0 + eased_progress * DAP_IQ,
y_pos = (1 - eased_progress) * WPPSI + eased_progress * WPPSI,
frame = i,
state = ifelse(i == 0, "Marginal Y",
ifelse(i == n_frames, "Scatter", "Transition"))
)
# Add marginal X distribution points
frame_data_x <- data %>%
mutate(
x_pos = (1 - eased_progress) * DAP_IQ + eased_progress * DAP_IQ,
y_pos = (1 - eased_progress) * 0 + eased_progress * WPPSI,
frame = i,
state = ifelse(i == 0, "Marginal X",
ifelse(i == n_frames, "Scatter", "Transition"))
)
frames <- rbind(frames, frame_data, frame_data_x)
}
return(frames)
}
# Create the animation data
# Replace 'DATA' with your actual dataset name
anim_data <- create_animation_data(DATA)
# Create the animated plot
p <- ggplot(anim_data, aes(x = x_pos, y = y_pos)) +
geom_point(col = "blue", size = 1.5, alpha = 0.7) +
xlim(c(0, 150)) +
ylim(c(0, 140)) +
labs(
#title = "Transition from Marginal Distributions to Scatter Plot",
#subtitle = "Frame: {closest_state}",
x = "DAP_IQ",
y = "WPPSI"
) +
theme_classic(base_size = 12) +
transition_states(frame,
transition_length = 1,
state_length = 1) +
ease_aes('cubic-in-out')
# Render the animation
anim <- animate(p,
fps = 20,
duration = 8,
renderer = gifski_renderer("marginal_to_scatter.gif"))
anim
#| code-fold: true
library(gganimate)
# Assuming your data is called 'DATA'
# Create animation data with transition states
create_animation_data <- function(data, n_frames = 50) {
# Create frames for the transition
frames <- data.frame()
for(i in 0:n_frames) {
# Calculate transition progress (0 = marginal, 1 = scatter)
progress <- i / n_frames
# Smooth easing function (ease-in-out)
eased_progress <- 3 * progress^2 - 2 * progress^3
frame_data <- data %>%
mutate(
# Interpolate between marginal positions and actual positions
x_pos = (1 - eased_progress) * 0 + eased_progress * DAP_IQ,
y_pos = (1 - eased_progress) * WPPSI + eased_progress * WPPSI,
frame = i,
state = ifelse(i == 0, "Marginal Y",
ifelse(i == n_frames, "Scatter", "Transition"))
)
# Add marginal X distribution points
frame_data_x <- data %>%
mutate(
x_pos = (1 - eased_progress) * DAP_IQ + eased_progress * DAP_IQ,
y_pos = (1 - eased_progress) * 0 + eased_progress * WPPSI,
frame = i,
state = ifelse(i == 0, "Marginal X",
ifelse(i == n_frames, "Scatter", "Transition"))
)
frames <- rbind(frames, frame_data, frame_data_x)
}
return(frames)
}
# Create the animation data
# Replace 'DATA' with your actual dataset name
anim_data <- create_animation_data(DATA)
# Create the animated plot
p <- ggplot(anim_data, aes(x = x_pos, y = y_pos)) +
geom_point(col = "blue", size = 1.5, alpha = 0.7) +
xlim(c(0, 150)) +
ylim(c(0, 140)) +
labs(
#title = "Transition from Marginal Distributions to Scatter Plot",
#subtitle = "Frame: {closest_state}",
x = "DAP_IQ",
y = "WPPSI"
) +
theme_classic(base_size = 12) +
transition_states(frame,
transition_length = 1,
state_length = 5) +
ease_aes('cubic-in-out')
# Render the animation
anim <- animate(p,
fps = 20,
duration = 8,
renderer = gifski_renderer("marginal_to_scatter.gif"))
anim
# Render the animation
anim <- animate(p,
fps = 20,
duration = 20,
renderer = gifski_renderer("marginal_to_scatter.gif"))
anim
# Render the animation
anim <- animate(p,
fps = 40,
duration = 20,
renderer = gifski_renderer("marginal_to_scatter.gif"))
# Render the animation
anim <- animate(p,
fps = 40,
duration = 20,
renderer = gifski_renderer("marginal_to_scatter.gif"))
anim
#| code-fold: true
library(gganimate)
# Assuming your data is called 'DATA'
# Create animation data with transition states
create_animation_data <- function(data, n_frames = 50) {
# Create frames for the transition
frames <- data.frame()
for(i in 0:n_frames) {
# Calculate transition progress (0 = marginal, 1 = scatter)
progress <- i / n_frames
# Smooth easing function (ease-in-out)
eased_progress <- 3 * progress^2 - 2 * progress^3
frame_data <- data %>%
mutate(
# Interpolate between marginal positions and actual positions
x_pos = (1 - eased_progress) * 0 + eased_progress * DAP_IQ,
y_pos = (1 - eased_progress) * WPPSI + eased_progress * WPPSI,
frame = i,
state = ifelse(i == 0, "Marginal Y",
ifelse(i == n_frames, "Scatter", "Transition"))
)
# Add marginal X distribution points
frame_data_x <- data %>%
mutate(
x_pos = (1 - eased_progress) * DAP_IQ + eased_progress * DAP_IQ,
y_pos = (1 - eased_progress) * 0 + eased_progress * WPPSI,
frame = i,
state = ifelse(i == 0, "Marginal X",
ifelse(i == n_frames, "Scatter", "Transition"))
)
frames <- rbind(frames, frame_data, frame_data_x)
}
return(frames)
}
# Create the animation data
# Replace 'DATA' with your actual dataset name
anim_data <- create_animation_data(DATA)
# Create the animated plot
p <- ggplot(anim_data, aes(x = x_pos, y = y_pos)) +
geom_point(col = "blue", size = 1.5, alpha = 0.7) +
xlim(c(0, 150)) +
ylim(c(0, 140)) +
labs(
#title = "Transition from Marginal Distributions to Scatter Plot",
#subtitle = "Frame: {closest_state}",
x = "DAP_IQ",
y = "WPPSI"
) +
theme_classic(base_size = 12) +
transition_states(frame,
transition_length = 5,
state_length = 5) +
ease_aes('cubic-in-out')
# Render the animation
anim <- animate(p,
fps = 40,
duration = 20,
renderer = gifski_renderer("marginal_to_scatter.gif"))
anim
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(fill = "gray") +
geom_point(aes(y = 0),
width = 0,
shape = 21,
#alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(fill = "gray") +
geom_density()
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(fill = "gray") +
geom_density() +
geom_point(aes(y = 0),
width = 0,
shape = 21,
#alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_density() +
geom_histogram(fill = "gray") +
geom_point(aes(y = 0),
width = 0,
shape = 21,
#alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_point(aes(y = 0),
width = 0,
shape = 21,
#alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density() +
geom_point(aes(y = 0),
width = 0,
shape = 21,
#alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_point(aes(y = 0),
width = 0,
shape = 21,
#alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_jitter(aes(y = 0),
width = 0,
shape = 21,
alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_jitter(aes(y = 0),
width = 0,
shape = 21,
alpha = 0.3,
size = 3,
fill = "blue") +
geom_density(col = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_point(aes(y = 0),
width = 0,
shape = 21,
#alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(color = "red", size = 1) +
geom_jitter(aes(y = 0),
width = 0,
shape = 21,
alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_jitter(aes(y = 0),
width = 0,
height = 0,01,
shape = 21,
alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_jitter(aes(y = 0),
width = 0,
#height = 0,01,
shape = 21,
alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_jitter(aes(y = 0),
width = 0,
height = 0.01,
shape = 21,
alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_jitter(aes(y = 0),
width = 0,
height = 0.001,
shape = 21,
alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_point(aes(y = 0),
width = 0,
shape = 21,
#alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(fill = "gray") +
geom_point(aes(y = 0),
width = 0,
shape = 21,
#alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_jitter(aes(y = 0),
width = 0,
height = 0.001,
shape = 21,
alpha = 0.3,
size = 3,
fill = "blue") +
# ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = DAP_IQ)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_jitter(aes(y = 0),
width = 0,
height = 0.002,
shape = 21,
alpha = 0.3,
size = 3,
fill = "blue") +
# ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = WPPSI)) +
geom_histogram(fill = "gray") +
# geom_density(col = "blue") +
geom_point(aes(y = 0),
width = 0,
# height = 0.001,
shape = 21,
# alpha = 0.3,
size = 3,
fill = "blue") +
ylab("n") +
theme_classic(base_size = 12)
DATA %>%
ggplot(aes(x = WPPSI)) +
geom_histogram(aes(y = after_stat(density)), fill = "gray") +
geom_density(col = "blue") +
geom_jitter(aes(y = 0),
width = 0,
height = 0.002,
shape = 21,
alpha = 0.3,
size = 3,
fill = "blue") +
# ylab("n") +
theme_classic(base_size = 12)
